
/* this file is auto-generated by "esr __mkaugments.ts", DO NOT EDIT */
import * as ast from "./ast"


declare module "./ast" {
  interface BinOp {
    setLeft(left: Node): this
    setRight(right: Node): this
  }

  interface UnaryOp {
    setOperand(operand: Node): this
  }

  interface Literal {
    setValue(value: string): this
  }

  interface Ident {
    setKind(kind: IdentKind): this
  }

  interface Branch {
    setCondition(condition: Node): this
    setThen(then: Node): this
    setOtherwise(otherwise: Node): this
  }

  interface Loop {
    setInit(init: Node): this
    setBody(body: Statement): this
  }

  interface ImportAs {
    setIdent(ident: Ident): this
    setPath(path: string): this
    setSubIdent(sub_ident: Ident): this
  }

  interface Block {
    addStatement(value: Statement): this
  }

  interface FnDefinition {
    setIdent(ident: Ident): this
    addArg(value: Variable): this
    setBody(body: Block): this
  }

  interface FnDeclaration {
    setExtern(extern: boolean): this
    addArg(value: Node): this
    setIdent(ident: Ident): this
  }

  interface TypeDeclaration {
    setIdent(ident: Ident): this
    addDecl(value: Expression): this
  }

  interface Variable {
    setTypeExpression(type_expression: Expression): this
    setDefaultExpression(default_expression: Expression): this
  }

}

ast.BinOp.prototype.setLeft = function (value) {
  this.left = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.BinOp.prototype.setRight = function (value) {
  this.right = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.UnaryOp.prototype.setOperand = function (value) {
  this.operand = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.Literal.prototype.setValue = function (value) {
  this.value = value
  return this
}

ast.Ident.prototype.setKind = function (value) {
  this.kind = value
  return this
}

ast.Branch.prototype.setCondition = function (value) {
  this.condition = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.Branch.prototype.setThen = function (value) {
  this.then = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.Branch.prototype.setOtherwise = function (value) {
  this.otherwise = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.Loop.prototype.setInit = function (value) {
  this.init = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.Loop.prototype.setBody = function (value) {
  this.body = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.ImportAs.prototype.setIdent = function (value) {
  this.ident = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.ImportAs.prototype.setPath = function (value) {
  this.path = value
  return this
}

ast.ImportAs.prototype.setSubIdent = function (value) {
  this.sub_ident = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.Block.prototype.addStatement = function (value) {
  this.statements.push(value)
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.FnDefinition.prototype.setIdent = function (value) {
  this.ident = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.FnDefinition.prototype.addArg = function (value) {
  this.args.push(value)
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.FnDefinition.prototype.setBody = function (value) {
  this.body = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.FnDeclaration.prototype.setExtern = function (value) {
  this.extern = value
  return this
}

ast.FnDeclaration.prototype.addArg = function (value) {
  this.args.push(value)
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.FnDeclaration.prototype.setIdent = function (value) {
  this.ident = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.TypeDeclaration.prototype.setIdent = function (value) {
  this.ident = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.TypeDeclaration.prototype.addDecl = function (value) {
  this.decls.push(value)
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.Variable.prototype.setTypeExpression = function (value) {
  this.type_expression = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

ast.Variable.prototype.setDefaultExpression = function (value) {
  this.default_expression = value
  this.extendRange(value)
  value.setParent(this)
  return this
}

