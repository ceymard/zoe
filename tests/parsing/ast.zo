
trait #json[...$args : []String] (
  fn jsonIter() -> Iterator[jsonValue] { }
)

type SomeType = OtherType (
  is #debug
)

enum MyDict (
  | Something
  | null

  fn new() { }
)

struct Position (
  line: Int
  character: Int
  offset: Int
) {
  #json["line", "character"]
}

struct Range (
  start: Position
  end: Position
) {
  fn length(const this) -> Int { return this.end.offset - this.start.offset }

  // Start of method definitions and all...
  #json["start", "end"]
}

trait #Ranged (
  range: Range
) {

}

import "//lsp" as lsp
import "//lsp" (#Range)

trait #Node (
  lsp.#Ranged
) {
  // In a trait, this is the actual, implementing type
  // $This is an implicit type that refers to the current type being implemented
  fn new(range: @lsp.Range) -> $This {
    // Create
    if ($This.has("")) {

    }
    return
  }

  fn asValueNode(this) -> #ValueNode | null { return null }
}

trait #ValueNode (
  #Node
  value: String
) {
  fn#Node asValueNode(this) { return this }
}

trait #BinOpNode (
  #Node
  left: #Expression
  right: #Expression
) {
  fn new(left: #Expression, right: #Expression) -> $This {
    var res = $This(left = left, right = right)
    res.range.extend(left)
    res.range.extend(right)
    return res
  }
}

struct String (#ValueNode)
struct Number (#ValueNode)
struct Mul (#BinOpNode)
struct Div (#BinOpNode)